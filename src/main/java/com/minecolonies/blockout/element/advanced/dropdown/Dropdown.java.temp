package com.minecolonies.blockout.element.advanced.dropdown;

import com.google.common.collect.Lists;
import com.minecolonies.blockout.binding.dependency.IDependencyObject;
import com.minecolonies.blockout.builder.core.IBlockOutGuiConstructionData;
import com.minecolonies.blockout.core.element.drawable.IChildDrawableUIElement;
import com.minecolonies.blockout.core.element.drawable.IDrawableUIElement;
import com.minecolonies.blockout.core.element.values.AxisDistance;
import com.minecolonies.blockout.core.management.render.IRenderManager;
import com.minecolonies.blockout.element.core.AbstractChildrenContainingUIElement;
import com.minecolonies.blockout.render.core.IRenderingController;
import net.minecraft.util.ResourceLocation;
import org.jetbrains.annotations.NotNull;

import java.util.Collection;

public class Dropdown extends AbstractChildrenContainingUIElement implements IDrawableUIElement, IChildDrawableUIElement
{

    private static final int CONST_SCROLLBAR_WIDTH = 5;


    //The current scroll state is not bindable. It is exclusively controlled by the control it self.
    private       double  scrollOffset;

    //Used to cache the contents of the databound list.
    private Collection<?>                resolvedDataContext              = Lists.newArrayList();
    private ResourceLocation             resolvedTemplateLocation         = new ResourceLocation("");
    private IBlockOutGuiConstructionData resolvedTemplateConstructionData = null;

    //Bindable resource binding.
    private IDependencyObject<ResourceLocation>             templateResource;
    private IDependencyObject<IBlockOutGuiConstructionData> templateConstructionData;

    private IDependencyObject<IDropDownTriggeringElement> triggeringChildElement;
    private IDependencyObject<ResourceLocation> filteringChildName;


    /**
     * Called by the rendering manager before the drawing of the background of our children starts.
     *
     * @param manager The manager.
     */
    @Override
    public void preBackgroundDrawOfChildren(@NotNull final IRenderManager manager)
    {

    }

    /**
     * Called by the rendering manager after the drawing of the background of our children ended.
     *
     * @param manager The manager.
     */
    @Override
    public void postBackgroundDrawOfChildren(@NotNull final IRenderManager manager)
    {

    }

    /**
     * Called by the rendering manager before the drawing of the foreground of our children starts.
     *
     * @param manager The manager.
     */
    @Override
    public void preForegroundDrawOfChildren(@NotNull final IRenderManager manager)
    {

    }

    /**
     * Called by the rendering manager after the drawing of the foreground of our children ended.
     *
     * @param manager The manager.
     */
    @Override
    public void postForegroundDrawOfChildren(@NotNull final IRenderManager manager)
    {

    }

    @Override
    public void drawBackground(@NotNull final IRenderingController controller)
    {

    }

    @Override
    public void drawForeground(@NotNull final IRenderingController controller)
    {

    }
}
